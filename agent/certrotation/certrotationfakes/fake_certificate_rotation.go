// Code generated by counterfeiter. DO NOT EDIT.
package certrotationfakes

import (
	"sync"

	"github.com/vmware-tanzu/cluster-api-provider-bringyourownhost/agent/certrotation"
)

type FakeCertificateRotation struct {
	RotateCertificateStub        func() error
	rotateCertificateMutex       sync.RWMutex
	rotateCertificateArgsForCall []struct {
	}
	rotateCertificateReturns struct {
		result1 error
	}
	rotateCertificateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCertificateRotation) RotateCertificate() error {
	fake.rotateCertificateMutex.Lock()
	ret, specificReturn := fake.rotateCertificateReturnsOnCall[len(fake.rotateCertificateArgsForCall)]
	fake.rotateCertificateArgsForCall = append(fake.rotateCertificateArgsForCall, struct {
	}{})
	stub := fake.RotateCertificateStub
	fakeReturns := fake.rotateCertificateReturns
	fake.recordInvocation("RotateCertificate", []interface{}{})
	fake.rotateCertificateMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCertificateRotation) RotateCertificateCallCount() int {
	fake.rotateCertificateMutex.RLock()
	defer fake.rotateCertificateMutex.RUnlock()
	return len(fake.rotateCertificateArgsForCall)
}

func (fake *FakeCertificateRotation) RotateCertificateCalls(stub func() error) {
	fake.rotateCertificateMutex.Lock()
	defer fake.rotateCertificateMutex.Unlock()
	fake.RotateCertificateStub = stub
}

func (fake *FakeCertificateRotation) RotateCertificateReturns(result1 error) {
	fake.rotateCertificateMutex.Lock()
	defer fake.rotateCertificateMutex.Unlock()
	fake.RotateCertificateStub = nil
	fake.rotateCertificateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCertificateRotation) RotateCertificateReturnsOnCall(i int, result1 error) {
	fake.rotateCertificateMutex.Lock()
	defer fake.rotateCertificateMutex.Unlock()
	fake.RotateCertificateStub = nil
	if fake.rotateCertificateReturnsOnCall == nil {
		fake.rotateCertificateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.rotateCertificateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCertificateRotation) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.rotateCertificateMutex.RLock()
	defer fake.rotateCertificateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCertificateRotation) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ certrotation.CertificateRotation = new(FakeCertificateRotation)
